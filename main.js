(()=>{"use strict";var e,t,r={696:(e,t,r)=>{r(177);const n=document.querySelector("[data-widget=ticketDeck]"),o=n.querySelector("ul.ticketList"),i=n.querySelector("button.addTicket");class c{constructor(e,t){this.element=document.querySelector(e),this.tasks=t}camposeDate(e){return this.stamp=new Date(e),this.dateStamp=this.stamp.getDate()<10?`0${this.stamp.getDate()}`:this.stamp.getDate(),this.mounth=this.stamp.getMonth()<10?`0${this.stamp.getMonth()}`:this.stamp.getMonth(),this.yearStamp=String(this.stamp.getFullYear())[0]+String(this.stamp.getFullYear())[1],this.taskDate=`${this.dateStamp}.${this.mounth}.${this.yearStamp}`,this.taskDate}camposeTime(e){return this.stamp=new Date(e),this.hours=this.stamp.getHours()<10?`0${this.stamp.getHours()}`:this.stamp.getHours(),this.min=this.stamp.getMinutes()<10?`0${this.stamp.getMinutes()}`:this.stamp.getMinutes(),this.taskTime=`${this.hours}:${this.min}`,this.taskTime}renderItem(e){return`\n      <li class = "ticket" id=${e.id}> \n      <div class="ticketBody"> \n       <div class="selectTicket"> \n        <button class="selectTicketBtn">\n      </button> \n      </div> \n      <div class="ticketDescr">${e.name}</div> \n      <div class="ticketRest"> \n      <div class="ticketDate"> <span class="date">${this.camposeDate(e.created)}</span><span class="time">${this.camposeTime(e.created)}</span></div> \n      <button class="editTicketBtn"><i class="fa-solid fa-pencil"></i> </button> \n      <button class="deleteTicketBtn"><i class="fa-regular fa-circle-xmark"></i> </button> \n      </div> \n      </div> \n      <div class="ticketDescrLong">${e.description}</div> \n    </li>`}renderItems(e){e.forEach((e=>{const t=this.renderItem(e);this.element.insertAdjacentHTML("beforeend",t),e.status&&this.element.lastChild.querySelector("button.selectTicketBtn").classList.add("checked")}))}renderTasks(){this.renderItems(this.tasks)}}document.addEventListener("DOMContentLoaded",(()=>{const e=new Request("http://localhost:7070/?method=allTickets",{method:"GET",credentials:"same-origin"});fetch(e).then((e=>e.json())).then((e=>{new c("ul.ticketList",e).renderTasks()})).catch((e=>{throw e}))})),o.addEventListener("click",(e=>{const t=e.target,r=t.closest("li.ticket");if(t.closest("button"))return(n=t.closest("button")).classList.contains("selectTicketBtn")&&function(e){const t=e.closest(".ticket"),r=new Request(`http://localhost:7070/?method=updateStatusById&id= + ${t.id}`,{method:"GET",credentials:"same-origin"});fetch(r).then((e=>e.json())).then((()=>{t.querySelector("button.selectTicketBtn").classList.toggle("checked")})).catch((e=>{throw e}))}(n),n.classList.contains("editTicketBtn")&&function(e){const t=e.closest(".ticket"),r=t.querySelector(".ticketDescr").innerHTML,n=t.querySelector(".ticketDescrLong").innerHTML,o=document.querySelector("[data-id=changeTicket-form]");o.classList.toggle("active");const i=Array.from(o.elements).filter((e=>{let{name:t}=e;return t}));i[0].value=r,i[1].value=n,o.addEventListener("submit",(()=>{const e={method:"POST",credentials:"same-origin",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:Array.from(i).map((e=>{let{name:t,value:r}=e;return`${t}=${encodeURIComponent(r)}`})).join("&")},r=new Request(`http://localhost:7070/?method=updateById&id=+${t.id}`,e);fetch(r).then((e=>e.json())).catch((e=>{throw e}))}))}(n),void(n.classList.contains("deleteTicketBtn")&&function(e){const t=e.closest(".ticket"),r=document.querySelector("[data-id=deleteTicket-form]");r.classList.toggle("active"),r.addEventListener("submit",(()=>{const e=new Request(`http://localhost:7070/?method=deleteById&id=+${t.id}`,{method:"GET",credentials:"same-origin"});fetch(e).then((e=>e.json())).catch((e=>{throw e}))}))}(n));var n;const o=new Request(`http://localhost:7070/?method=ticketById&id=+${r.id}`,{method:"GET",credentials:"same-origin"});fetch(o).then((e=>e.json())).then((e=>{const t=r.querySelector(".ticketDescrLong");t.innerHTML=e.description,t.classList.toggle("active")})).catch((e=>{throw e}))})),i.addEventListener("click",(()=>{const e=document.querySelector("[data-id=addTicket-form]");e.classList.toggle("active"),e.addEventListener("submit",(()=>{const{elements:t}=e,r=Array.from(t).filter((e=>{let{name:t}=e;return t})).map((e=>{let{name:t,value:r}=e;return`${t}=${encodeURIComponent(r)}`})).join("&"),n=new Request("http://localhost:7070/?method=createTicket",{method:"POST",credentials:"same-origin",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:r});fetch(n).then((e=>e.json())).catch((e=>{throw e}))}))}))},783:(e,t,r)=>{var n=r(618),o=Object.create(null),i="undefined"==typeof document,c=Array.prototype.forEach;function a(){}function s(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function d(){var e=document.querySelectorAll("link");c.call(e,(function(e){!0!==e.visited&&s(e)}))}function l(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),a;var r,u,h=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}o[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),o=r&&r[1];return o&&e?e.split(",").map((function(e){var r=new RegExp("".concat(o,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=h(t.filename),r=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return c.call(t,(function(t){if(t.href){var o=function(e,t){var r;return e=n(e),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);l(o)&&!0!==t.visited&&o&&(s(t,o),r=!0)}})),r}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void d();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),d())},50,u=0,function(){var e=this,t=arguments;clearTimeout(u),u=setTimeout((function(){return r.apply(e,t)}),50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},177:(e,t,r)=>{var n=r(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},n={};function o(e){var t=n[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var i=n[e]={id:e,exports:{}};try{var c={id:e,module:i,factory:r[e],require:o};o.i.forEach((function(e){e(c)})),i=c.module,c.factory.call(i.exports,i,i.exports,c.require)}catch(e){throw i.error=e,e}return i.exports}o.m=r,o.c=n,o.i=[],o.hu=e=>e+"."+o.h()+".hot-update.js",o.miniCssF=e=>{},o.hmrF=()=>"main."+o.h()+".hot-update.json",o.h=()=>"151027097ac00c24a053",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ajs:",o.l=(r,n,i,c)=>{if(e[r])e[r].push(n);else{var a,s;if(void 0!==i)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var u=d[l];if(u.getAttribute("src")==r||u.getAttribute("data-webpack")==t+i){a=u;break}}a||(s=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",t+i),a.src=r),e[r]=[n];var h=(t,n)=>{a.onerror=a.onload=null,clearTimeout(p);var o=e[r];if(delete e[r],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(n))),t)return t(n)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=h.bind(null,a.onerror),a.onload=h.bind(null,a.onload),s&&document.head.appendChild(a)}},(()=>{var e,t,r,n={},i=o.c,c=[],a=[],s="idle",d=0,l=[];function u(e){s=e;for(var t=[],r=0;r<a.length;r++)t[r]=a[r].call(null,e);return Promise.all(t)}function h(){0==--d&&u("ready").then((function(){if(0===d){var e=l;l=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==s)throw new Error("check() is only allowed in idle status");return u("check").then(o.hmrM).then((function(r){return r?u("prepare").then((function(){var n=[];return t=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,i){return o.hmrC[i](r.c,r.r,r.m,e,t,n),e}),[])).then((function(){return t=function(){return e?m(e):u("ready").then((function(){return n}))},0===d?t():new Promise((function(e){l.push((function(){e(t())}))}));var t}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==s?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+s+")")})):m(e)}function m(e){e=e||{},v();var n=t.map((function(t){return t(e)}));t=void 0;var o=n.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var i=u("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var c,a=u("apply"),s=function(e){c||(c=e)},d=[];return n.forEach((function(e){if(e.apply){var t=e.apply(s);if(t)for(var r=0;r<t.length;r++)d.push(t[r])}})),Promise.all([i,a]).then((function(){return c?u("fail").then((function(){throw c})):r?m(e).then((function(e){return d.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return d}))}))}function v(){if(r)return t||(t=[]),Object.keys(o.hmrI).forEach((function(e){r.forEach((function(r){o.hmrI[e](r,t)}))})),r=void 0,!0}o.hmrD=n,o.i.push((function(l){var m,v,g,y,k=l.module,w=function(t,r){var n=i[r];if(!n)return t;var o=function(o){if(n.hot.active){if(i[o]){var a=i[o].parents;-1===a.indexOf(r)&&a.push(r)}else c=[r],e=o;-1===n.children.indexOf(o)&&n.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+r),c=[];return t(o)},a=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&"e"!==l&&Object.defineProperty(o,l,a(l));return o.e=function(e){return function(e){switch(s){case"ready":u("prepare");case"prepare":return d++,e.then(h,h),e;default:return e}}(t.e(e))},o}(l.require,l.id);k.hot=(m=l.id,v=k,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:g=e!==m,_requireSelf:function(){c=v.parents.slice(),e=g?void 0:m,o(m)},active:!0,accept:function(e,t,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._acceptedDependencies[e[n]]=t||function(){},y._acceptedErrorHandlers[e[n]]=r;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,s){case"idle":t=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,t)})),u("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return s;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var t=a.indexOf(e);t>=0&&a.splice(t,1)},data:n[m]},e=void 0,y),k.parents=c,k.children=[],c=[],l.require=w})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&!e;)e=r[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{if("undefined"!=typeof document){var e=[],t=[],r=r=>({dispose:()=>{for(var t=0;t<e.length;t++){var r=e[t];r.parentNode&&r.parentNode.removeChild(r)}e.length=0},apply:()=>{for(var e=0;e<t.length;e++)t[e].rel="stylesheet";t.length=0}});o.hmrC.miniCss=(n,i,c,a,s,d)=>{s.push(r),n.forEach((r=>{var n=o.miniCssF(r),i=o.p+n,c=((e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var o=(c=r[n]).getAttribute("data-href")||c.getAttribute("href");if("stylesheet"===c.rel&&(o===e||o===t))return c}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var c;if((o=(c=i[n]).getAttribute("data-href"))===e||o===t)return c}})(n,i);c&&a.push(new Promise(((n,o)=>{var a=((e,t,r,n,o)=>{var i=document.createElement("link");return i.rel="stylesheet",i.type="text/css",i.onerror=i.onload=r=>{if(i.onerror=i.onload=null,"load"===r.type)n();else{var c=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.href||t,s=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");s.code="CSS_CHUNK_LOAD_FAILED",s.type=c,s.request=a,i.parentNode&&i.parentNode.removeChild(i),o(s)}},i.href=t,r?r.parentNode.insertBefore(i,r.nextSibling):document.head.appendChild(i),i})(r,i,c,(()=>{a.as="style",a.rel="preload",n()}),o);e.push(c),t.push(a)})))}))}}})(),(()=>{var e,t,r,n,i,c=o.hmrS_jsonp=o.hmrS_jsonp||{179:0},a={};function s(t,r){return e=r,new Promise(((e,r)=>{a[t]=e;var n=o.p+o.hu(t),i=new Error;o.l(n,(e=>{if(a[t]){a[t]=void 0;var n=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+t+" failed.\n("+n+": "+o+")",i.name="ChunkLoadError",i.type=n,i.request=o,r(i)}}))}))}function d(e){function a(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var i=n.pop(),c=i.id,a=i.chain,d=o.c[c];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:c};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:c};for(var l=0;l<d.parents.length;l++){var u=d.parents[l],h=o.c[u];if(h){if(h.hot._declinedDependencies[c])return{type:"declined",chain:a.concat([u]),moduleId:c,parentId:u};-1===t.indexOf(u)&&(h.hot._acceptedDependencies[c]?(r[u]||(r[u]=[]),s(r[u],[c])):(delete r[u],t.push(u),n.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}o.f&&delete o.f.jsonpHmr,t=void 0;var d={},l=[],u={},h=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(o.o(r,p)){var f,m=r[p],v=!1,g=!1,y=!1,k="";switch((f=m?a(p):{type:"disposed",moduleId:p}).chain&&(k="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+f.moduleId+k));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+k));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+k));break;case"accepted":e.onAccepted&&e.onAccepted(f),g=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),y=!0;break;default:throw new Error("Unexception type "+f.type)}if(v)return{error:v};if(g)for(p in u[p]=m,s(l,f.outdatedModules),f.outdatedDependencies)o.o(f.outdatedDependencies,p)&&(d[p]||(d[p]=[]),s(d[p],f.outdatedDependencies[p]));y&&(s(l,[f.moduleId]),u[p]=h)}r=void 0;for(var w,b=[],E=0;E<l.length;E++){var D=l[E],T=o.c[D];T&&(T.hot._selfAccepted||T.hot._main)&&u[D]!==h&&!T.hot._selfInvalidated&&b.push({module:D,require:T.hot._requireSelf,errorHandler:T.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete c[e]})),n=void 0;for(var t,r=l.slice();r.length>0;){var i=r.pop(),a=o.c[i];if(a){var s={},u=a.hot._disposeHandlers;for(E=0;E<u.length;E++)u[E].call(null,s);for(o.hmrD[i]=s,a.hot.active=!1,delete o.c[i],delete d[i],E=0;E<a.children.length;E++){var h=o.c[a.children[E]];h&&(e=h.parents.indexOf(i))>=0&&h.parents.splice(e,1)}}}for(var p in d)if(o.o(d,p)&&(a=o.c[p]))for(w=d[p],E=0;E<w.length;E++)t=w[E],(e=a.children.indexOf(t))>=0&&a.children.splice(e,1)},apply:function(t){for(var r in u)o.o(u,r)&&(o.m[r]=u[r]);for(var n=0;n<i.length;n++)i[n](o);for(var c in d)if(o.o(d,c)){var a=o.c[c];if(a){w=d[c];for(var s=[],h=[],p=[],f=0;f<w.length;f++){var m=w[f],v=a.hot._acceptedDependencies[m],g=a.hot._acceptedErrorHandlers[m];if(v){if(-1!==s.indexOf(v))continue;s.push(v),h.push(g),p.push(m)}}for(var y=0;y<s.length;y++)try{s[y].call(null,w)}catch(r){if("function"==typeof h[y])try{h[y](r,{moduleId:c,dependencyId:p[y]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:c,dependencyId:p[y],error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:c,dependencyId:p[y],error:r}),e.ignoreErrored||t(r)}}}for(var k=0;k<b.length;k++){var E=b[k],D=E.module;try{E.require(D)}catch(r){if("function"==typeof E.errorHandler)try{E.errorHandler(r,{moduleId:D,module:o.c[D]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:D,error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:D,error:r}),e.ignoreErrored||t(r)}}return l}}}self.webpackHotUpdateajs=(t,n,c)=>{for(var s in n)o.o(n,s)&&(r[s]=n[s],e&&e.push(s));c&&i.push(c),a[t]&&(a[t](),a[t]=void 0)},o.hmrI.jsonp=function(e,t){r||(r={},i=[],n=[],t.push(d)),o.o(r,e)||(r[e]=o.m[e])},o.hmrC.jsonp=function(e,a,l,u,h,p){h.push(d),t={},n=a,r=l.reduce((function(e,t){return e[t]=!1,e}),{}),i=[],e.forEach((function(e){o.o(c,e)&&void 0!==c[e]?(u.push(s(e,p)),t[e]=!0):t[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,r){t&&o.o(t,e)&&!t[e]&&(r.push(s(e)),t[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o(696)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,